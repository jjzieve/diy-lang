;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or 
    (lambda (a b)
        (if a #t 
            (if b #t #f) #f)))

(define and 
    (lambda (a b)
        (if a (if b #t #f) #f)))

(define xor 
    (lambda (a b)
        (and
            (or a b)
            (not (and a b)))))

(define >= 
    (lambda (a b)
        (or (> a b) (eq a b))))

(define <= 
    (lambda (a b)
        (not (> a b))))

(define <
    (lambda (a b)
        (not (>= a b))))

(define length
    (lambda (list)
        (if (empty list)
            0
            (+ 1 (length (tail list))))))

(define sum
    (lambda (list)
        (if (empty list)
            0
            (+ (head list) (sum (tail list))))))

(define range
    (lambda (start end)
        (if (> start end)
            '()
            (cons start
                (range (+ 1 start) end)))))

(define append
    (lambda (list1 list2)
        (if (empty list1)
            list2
            (cons (head list1)
                (append (tail list1) list2)))))

(define reverse
    (lambda (list)
        (if (empty list)
            '()
            (append (reverse (tail list))
                (cons (head list) '())))))

(define filter
    (lambda (function list)
        (if (empty list)
            '()
            (if (function (head list))
                (cons (head list) (filter function (tail list)))
                (filter function (tail list))
            ))))

(define map
    (lambda (function list)
        (if (empty list)
            '()
            (cons  (function (head list)) (map function (tail list)))
        )))

(define reduce
    (lambda (function accumulator list)
        (if (empty list)
            accumulator
            (reduce function 
                (function accumulator (head list))
                (tail list)))))

(define filter-lt-or-eq
    (lambda (list pivot)
        (filter (lambda (x) (<= x pivot)) list)))

(define filter-gt
    (lambda (list pivot)
        (filter (lambda (x) (> x pivot)) list)))

;; Quicksort
(define sort
    (lambda (list)
        (if (empty list)
            '()
            (append (sort (filter-lt-or-eq (tail list) (head list)))
                    (cons (head list)
                    (sort (filter-gt list (head list))))))))
